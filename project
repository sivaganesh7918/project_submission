 Python-based URL shortener with Flask and Redis

REPOSITORY STRUCTURE
/url-shortener/
├── README.md
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── models.py
│   ├── utils.py
│   ├── routes/
│   │   ├── api.py
│   │   └── web.py
│   └── templates/
│       └── index.html
├── tests/
│   ├── test_models.py
│   └── test_routes.py
├── requirements.txt
├── config.py
└── .env.example

Key Files
1. requirements.txt
flask==2.3.2
redis==4.5.5
python-dotenv==1.0.0
pytest==7.4.0
flask-sqlalchemy==3.0.3

2. app/main.py
python
from flask import Flask
from app.routes.api import api_bp
from app.routes.web import web_bp
from app.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object('config.Config')
    
    # Initialize database
    db.init_app(app)
    
    # Register blueprints
    app.register_blueprint(api_bp, url_prefix='/api')
    app.register_blueprint(web_bp)
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)

3. app/utils.py (URL shortening logic)
python
import string
import random

def generate_short_code(length=6):
    """Generate a random short code"""
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

def validate_url(url):
    """Basic URL validation"""
    return url.startswith(('http://', 'https://'))

4. app/models.py
python
from datetime import datetime
from app import db

class ShortUrl(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    original_url = db.Column(db.String(2048), nullable=False)
    short_code = db.Column(db.String(6), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    clicks = db.Column(db.Integer, default=0)
    
    def __repr__(self):
        return f'<ShortUrl {self.short_code}>'

5. app/routes/api.py
python
from flask import Blueprint, request, jsonify
from app.models import ShortUrl, db
from app.utils import generate_short_code, validate_url

api_bp = Blueprint('api', __name__)

@api_bp.route('/shorten', methods=['POST'])
def shorten_url():
    data = request.get_json()
    original_url = data.get('url')
    
    if not validate_url(original_url):
        return jsonify({'error': 'Invalid URL'}), 400
    
    short_code = generate_short_code()
    
    # Check if code exists (very unlikely but possible)
    while ShortUrl.query.filter_by(short_code=short_code).first():
        short_code = generate_short_code()
    
    new_url = ShortUrl(original_url=original_url, short_code=short_code)
    db.session.add(new_url)
    db.session.commit()
    
    return jsonify({
        'original_url': original_url,
        'short_url': f'{request.host_url}{short_code}'
    }), 201

6. app/routes/web.py
python
from flask import Blueprint, render_template, redirect, url_for
from app.models import ShortUrl, db

web_bp = Blueprint('web', __name__)

@web_bp.route('/')
def index():
    return render_template('index.html')

@web_bp.route('/<short_code>')
def redirect_to_url(short_code):
    url_entry = ShortUrl.query.filter_by(short_code=short_code).first_or_404()
    url_entry.clicks += 1
    db.session.commit()
    return redirect(url_entry.original_url)

7. config.py
python
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-key')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///urls.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')



How to Run
1.Set up a virtual environment:
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

2.Install dependencies:
pip install -r requirements.txt

3.Run the application:
python app/main.py


Features Implemented
1.URL shortening with random code generation
2.Redirection to original URLs
3.Click tracking
4.REST API endpoint
5.Basic web interface
6.SQLite database (can be easily switched to PostgreSQL/MySQL)
